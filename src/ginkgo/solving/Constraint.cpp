#include <ginkgo/solving/Constraint.h>

namespace ginkgo
{

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Constraint
//
////////////////////////////////////////////////////////////////////////////////////////////////////

Constraint::Constraint(size_t id, Literals &&literals)
:	m_id{id},
	m_literals{std::move(literals)},
	m_lbdOriginal{0},
	m_lbdAfterResolution{0}
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////

size_t Constraint::id() const
{
	return m_id;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

Literals &Constraint::literals()
{
	return m_literals;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

const Literals &Constraint::literals() const
{
	return m_literals;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Constraint::setLBDOriginal(size_t lbdOriginal)
{
	m_lbdOriginal = lbdOriginal;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

size_t Constraint::lbdOriginal() const
{
	return m_lbdOriginal;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Constraint::setLBDAfterResolution(size_t lbdAfterResolution)
{
	m_lbdAfterResolution = lbdAfterResolution;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

size_t Constraint::lbdAfterResolution() const
{
	return m_lbdAfterResolution;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::ostream &operator<<(std::ostream &stream, const Constraint &constraint)
{
	stream << ":- ";

	for (auto i = constraint.literals().cbegin(); i != constraint.literals().cend(); i++)
	{
		const auto &literal = *i;

		if (i != constraint.literals().cbegin())
			stream << ", ";

		if (literal.sign() == Literal::Sign::Negative)
			stream << "not ";

		stream << literal.symbol().clingoSymbol;
	}

	stream << ".  %lbd = " << constraint.lbdAfterResolution();

	return stream;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

}
