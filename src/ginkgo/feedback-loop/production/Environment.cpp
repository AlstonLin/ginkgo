#include <ginkgo/feedback-loop/production/Environment.h>

#include <iostream>

namespace ginkgo
{
namespace feedbackLoop
{
namespace production
{

////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Environment
//
////////////////////////////////////////////////////////////////////////////////////////////////////

Environment::Environment(boost::filesystem::path outputPrefix)
:	m_directConstraintsStream(outputPrefix.string() + ".constraints-direct", std::ios::out),
	m_generalizedConstraintsStream(outputPrefix.string() + ".constraints-generalized", std::ios::out),
	m_statisticsStream(outputPrefix.string() + ".stats-produce", std::ios::out)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::ofstream &Environment::directConstraintsStream()
{
	return m_directConstraintsStream;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::ofstream &Environment::generalizedConstraintsStream()
{
	return m_generalizedConstraintsStream;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

std::ofstream &Environment::statisticsStream()
{
	return m_statisticsStream;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void Environment::setLogLevel(LogLevel logLevel)
{
	m_logLevel = logLevel;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

LogLevel Environment::logLevel() const
{
	return m_logLevel;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
}
